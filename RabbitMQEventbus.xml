<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RabbitMQEventbus</name>
    </assembly>
    <members>
        <member name="P:RabbitMQ.Connection.IRabbitMQPersistentConnection.IsConnected">
            <summary>
            Determines if the RabbitMQ client is connected to the specified host
            </summary>
            <returns>true if the connection is established</returns>
        </member>
        <member name="M:RabbitMQ.Connection.IRabbitMQPersistentConnection.CreateModel">
            <summary>
            Creates a model created by the provided connectionFactory
            </summary>
            <returns>The model that is created with the connection</returns>
        </member>
        <member name="M:RabbitMQ.Connection.IRabbitMQPersistentConnection.TryConnect">
            <summary>
            Attempts to create a connection with the provided connectionFactory
            </summary>
            <returns>true if the connection was successful</returns>
        </member>
        <member name="M:RabbitMQ.EventsBus.IEventBus.Publish(System.String,RabbitMQ.Events.IntegrationEvent)">
            <summary>
            Publish a message to the eventBus with the given routingKey and event
            </summary>
            <param name="routingKey">The routing key to publish the event with</param>
            <param name="event">The event to publish</param>
        </member>
        <member name="M:RabbitMQ.EventsBus.IEventBus.Subscribe``2(System.String,System.Collections.Generic.List{System.String},System.Object[])">
            <summary>
            Subscribe to the event bus' queue with the given routingKeys
            </summary>
            <typeparam name="E">The type of event the handler will process</typeparam>
            <typeparam name="EH">The type of eventHandler that will process the event</typeparam>
            <param name="routingKeys">The routing keys to subscribe with</param>
            <param name="services">The services to inject into the eventHandler</param>
            <param name="queueName">The name of the queue to subscribe to</param>
        </member>
        <member name="M:RabbitMQ.EventsBus.IEventBus.Unsubscribe(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Unsubscribe from the event bus' queue with the given routingKeys
            </summary>
            <param name="routingKeys">The routing keys to unsubscribe with</param>
            <param name="queueName">The name of the queue to unsubscribe from</param>
        </member>
        <member name="M:RabbitMQ.EventsBus.IEventBus.CreateRpcServer``2(System.String,System.Object[])">
            <summary>
            Creates a rpcServer on the given queue
            </summary>
            <param name="queue">The queue on which the rpc server will run</param>
            <param name="services">The services to inject into the eventHandler</param>
        </member>
        <member name="M:RabbitMQ.EventsBus.IEventBus.CallRpcServer(System.Object,System.String)">
            <summary>
            Calls the rpcServer if created and sends a message with the given routingKey
            </summary>
            <param name="message">The message to publish</param>
            <param name="routingKey">The queue the message will be send to</param>
            <returns>The message received from the RPC server</returns>
        </member>
        <member name="M:RabbitMQ.Events.IIntegrationEventHandler`1.Handle(`0)">
            <summary>
            The method will be invoked to handle the message received from the eventbus
            </summary>
            <param name="event">The event to process</param>
        </member>
        <member name="M:RabbitMQ.Events.IntegrationEvent.#ctor">
            <summary>
              Default constructor that creates the event's id.
            </summary>
        </member>
        <member name="M:RabbitMQ.Events.IntegrationEvent.SetArgs(RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <summary>
            Sets basic properties from the given eventArgs argument.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:RabbitMQ.Events.IntegrationEvent.EventId">
            <summary>
            Event Id.
            </summary>
        </member>
        <member name="P:RabbitMQ.Events.IntegrationEvent.BasicProperties">
            <summary>
            Common AMQP Basic headers, spanning the union of the
            functionality offered by versions 0-8, 0-8qpid, 0-9 and 0-9-1 of AMQP.
            </summary>
        </member>
        <member name="P:RabbitMQ.Events.IEvent.EventId">
            <summary>
            The id of the event.
            The eventId is automatically generated on instantiation
            </summary>
        </member>
        <member name="P:RabbitMQ.Events.IEvent.BasicProperties">
            <summary>
            Common AMQP Basic content-class headers interface, spanning the union of the
            functionality offered by versions 0-8, 0-8qpid, 0-9 and 0-9-1 of AMQP.
            </summary>
        </member>
        <member name="M:RabbitMQ.Events.IRpcIntegrationEventHandler`1.Process(`0)">
            <summary>
            The method will be invoked to process the message received from the eventbus
            </summary>
            <param name="event"></param>
            <returns>The return message</returns>
        </member>
        <member name="M:RabbitMQ.Extensions.AddRabbitMQ(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Creates a eventbus instance and adds it as singleton to the specified services
            </summary>
            <param name="services">The services to configure the eventbus with</param>
            <returns>The services with added RabbitMQ configuration</returns>
        </member>
        <member name="P:RabbitMQ.Models.RabbitExchange.Name">
            <summary>
            The name of the exchange
            </summary>
        </member>
        <member name="P:RabbitMQ.Models.RabbitExchange.Type">
            <summary>
            The type of the exchange
            </summary>
        </member>
        <member name="M:RabbitMQ.Models.RabbitExchange.#ctor">
            <summary>
            Default constructor required for configuration
            </summary>
        </member>
        <member name="P:RabbitMQ.Models.RabbitQueue.Name">
            <summary>
            The name of the queue
            </summary>
        </member>
        <member name="P:RabbitMQ.Models.RabbitQueue.Durable">
            <summary>
            Should this queue survive a broker restart?
            </summary>
            
        </member>
        <member name="P:RabbitMQ.Models.RabbitQueue.RoutingKeys">
            <summary>
            The routingKeys the queue will be binded with
            </summary>
        </member>
        <member name="M:RabbitMQ.Models.RabbitQueue.#ctor">
            <summary>
            Default constructor required for configuration
            </summary>
        </member>
        <member name="P:RabbitMQ.RabbitMQConfiguration.Host">
            <summary>
            The host that will be used to configure the connection with RabbitMQ
            </summary>
        </member>
        <member name="P:RabbitMQ.RabbitMQConfiguration.Exchange">
            <summary>
            The exchange that should be declared to the eventbus
            </summary>
        </member>
        <member name="P:RabbitMQ.RabbitMQConfiguration.Queues">
            <summary>
            The queues that should be binded 
            </summary>
        </member>
        <member name="M:RabbitMQ.SubscriptionsManager.IEventBusSubscriptionsManager.AddSubscription``2(RabbitMQ.Client.IModel,System.Object[],RabbitMQ.Models.RabbitExchange,RabbitMQ.Models.RabbitQueue)">
            <summary>
            Binds the given queue to the event bus' exchange
            </summary>
            <typeparam name="E">The type of event the handler will process</typeparam>
            <typeparam name="EH">The type of eventHandler that will process the event</typeparam>
            <param name="channel">The channel that will be used to declare exchanges and bind with the given queue</param>
            <param name="args">The services that will be injected into the eventHandler</param>
            <param name="exchange">The exchange on which the subscription addition should occur</param>
            <param name="queue">The queue with routingKeys to bind</param>
        </member>
        <member name="M:RabbitMQ.SubscriptionsManager.IEventBusSubscriptionsManager.RemoveSubscription(RabbitMQ.Client.IModel,RabbitMQ.Models.RabbitExchange,RabbitMQ.Models.RabbitQueue)">
            <summary>
            Unbinds the given queue from the event bus' exchange
            </summary>
            <param name="channel">The channel that will be used to declare exchanges and unbind with the given queue</param>
            <param name="exchange">The exchange on which the subscription removal should occur</param>
            <param name="queue">The queue with routingKeys to unbind</param>
        </member>
        <member name="M:RabbitMQ.SubscriptionsManager.IEventBusSubscriptionsManager.CreateRpcServer``2(RabbitMQ.Client.IModel,System.Object[],RabbitMQ.Models.RabbitQueue)">
            <summary>
            Creates a rpcServer on the given queue with the given channel
            </summary>
            <param name="channel">The channel that will be used to declare the queue and consume with</param>
            <param name="args">The services to inject into the eventHandler</param>
            <param name="queue">The queue on which the rpc server will run</param>
        </member>
        <member name="M:RabbitMQ.SubscriptionsManager.IEventBusSubscriptionsManager.CallRpcServer(RabbitMQ.Client.IModel,System.Object,System.String)">
            <summary>
            Calls the rpcServer if created and sends a message with the given routingKey
            </summary>
            <param name="channel">The channel that will be used to consume and publish with</param>
            <param name="message">The message to publish</param>
            <param name="routingKey">The queue the message will be send to</param>
            <returns>The message received from the RPC server</returns>
        </member>
        <member name="P:RabbitMQEventbus.RabbitMQ.Models.RabbitHost.Hostname">
            <summary>
            The hostname to connect to
            </summary>
        </member>
        <member name="P:RabbitMQEventbus.RabbitMQ.Models.RabbitHost.Username">
            <summary>
            The username to login with
            </summary>
        </member>
        <member name="P:RabbitMQEventbus.RabbitMQ.Models.RabbitHost.Password">
            <summary>
            The password to login with
            </summary>
        </member>
        <member name="M:RabbitMQEventbus.RabbitMQ.Models.RabbitHost.#ctor">
            <summary>
            Default constructor required for configuration
            </summary>
        </member>
    </members>
</doc>
